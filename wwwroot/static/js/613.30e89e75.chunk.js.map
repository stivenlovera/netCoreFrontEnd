{"version":3,"file":"static/js/613.30e89e75.chunk.js","mappings":"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","sources":["Components/snackBars.tsx","Pages/Login/login.tsx"],"sourcesContent":["import { Snackbar, SnackbarOrigin } from '@mui/material'\r\nimport React, { useEffect, useState } from 'react';\r\nexport interface State extends SnackbarOrigin {\r\n    open: boolean;\r\n}\r\ninterface CSnackBarsProps {\r\n    open: boolean;\r\n    message: string;\r\n}\r\nexport const CSnackBars = (Props: CSnackBarsProps) => {\r\n    const [state, setState] = React.useState<State>({\r\n        open: Props.open,\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n    });\r\n    const { vertical, horizontal, open } = state;\r\n    \r\n    useEffect(() => {\r\n        console.log(Props.open)\r\n        setState({ ...state, open: Props.open});\r\n        return () => {\r\n            setState({ ...state, open: false });\r\n          } \r\n    }, [Props.open])\r\n\r\n\r\n\r\n    const handleClose = () => {\r\n        setState({ ...state, open: false });\r\n    };\r\n    return (\r\n        <Snackbar\r\n            autoHideDuration={2000}\r\n            anchorOrigin={{ vertical, horizontal }}\r\n            open={open}\r\n            message={Props.message}\r\n            onClose={handleClose}\r\n            key={vertical + horizontal}\r\n        />\r\n    )\r\n}\r\n","\r\nimport { Avatar, Box, Button, Checkbox, Container, createTheme, CssBaseline, FormControlLabel, Grid, Link, TextField, Typography } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setToken } from \"../../Reducers/Slices/LoginSlice\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { LoginAuthenticacion } from \"../../Services/Comisiones/Authenticacion\";\r\nimport { loginDto } from \"../../Services/Comisiones/Interfaces/Login\";\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport { browserName, osName, browserVersion } from 'react-device-detect';\r\nimport { CSnackBars } from \"../../Components/snackBars\";\r\ninterface MessageError {\r\n    message: string;\r\n    show: boolean;\r\n}\r\nconst initialMessageError: MessageError = { message: \"\", show: false };\r\n\r\nconst Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    const [{ message, show }, setMessage] = useState(initialMessageError);\r\n    const updateToken = (token: string) => {\r\n        dispatch(\r\n            setToken({\r\n                token: token\r\n            })\r\n        )\r\n    }\r\n    const iniciarSession = async (value: loginDto) => {\r\n        try {\r\n            setLoading(true);\r\n            setMessage(initialMessageError);\r\n            const { data } = await LoginAuthenticacion(value);\r\n            if (data.status == 1) {\r\n                updateToken(data.data.token);\r\n                setLoading(false);\r\n                navigate('/home')\r\n            }\r\n            else {\r\n                setErrors({\r\n                    usuario: 'Credenciales no validas'\r\n                });\r\n                setLoading(false);\r\n            }\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setMessage({ message: \"sistema se encuentra en mantemiento\", show: true });\r\n        }\r\n    }\r\n    const navigate = useNavigate();\r\n\r\n    const { values, handleSubmit, handleBlur, handleChange, handleReset, errors, getFieldProps, setErrors } = useFormik({\r\n        initialValues: {\r\n            usuario: '',\r\n            password: '',\r\n            browserName: browserName,\r\n            browserVersion: browserVersion,\r\n            osName: osName\r\n        },\r\n        onSubmit: async (value: loginDto) => {\r\n            iniciarSession(value)\r\n        },\r\n        validationSchema: Yup.object({\r\n            usuario: Yup.string()\r\n                .min(5, 'El valor debe ser almenos 3 caracteres')\r\n                .required('Es requerido'),\r\n            password: Yup.string()\r\n                .min(5, 'El valor debe ser almenos 3 caracteres')\r\n                .required('Es requerido'),\r\n        })\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Comisiones\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Usuario\"\r\n                            name=\"usuario\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus\r\n                            value={values.usuario}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            helperText={errors.usuario}\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            autoComplete=\"current-password\"\r\n                            helperText={errors.password}\r\n                        />\r\n                        {/*  <FormControlLabel\r\n                                control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                                label=\"Remember me\"\r\n                            /> */}\r\n                        <LoadingButton\r\n                            type=\"submit\"\r\n                            loading={loading}\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                        >\r\n                            <span>INGRESAR</span>\r\n                        </LoadingButton>\r\n                        <Grid container>\r\n                            {/*  <Grid item xs>\r\n                                    <Link href=\"#\" variant=\"body2\">\r\n                                        Forgot password?\r\n                                    </Link>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Link href=\"#\" variant=\"body2\">\r\n                                        {\"Don't have an account? Sign Up\"}\r\n                                    </Link>\r\n                                </Grid> */}\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n                <CSnackBars message={message} open={show} />\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;"],"names":["CSnackBars","Props","React","open","vertical","horizontal","state","setState","useEffect","console","log","Snackbar","autoHideDuration","anchorOrigin","message","onClose","initialMessageError","show","dispatch","useDispatch","useState","loading","setLoading","setMessage","iniciarSession","value","LoginAuthenticacion","data","status","token","setToken","navigate","setErrors","usuario","useNavigate","useFormik","initialValues","password","browserName","browserVersion","osName","onSubmit","validationSchema","Yup","min","required","values","handleSubmit","handleBlur","handleChange","errors","handleReset","getFieldProps","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","noValidate","mt","TextField","margin","fullWidth","id","label","name","autoComplete","autoFocus","onChange","onBlur","helperText","type","LoadingButton","Grid","container"],"sourceRoot":""}