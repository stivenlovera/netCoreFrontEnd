{"version":3,"file":"static/js/868.49dc81cf.chunk.js","mappings":"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","sources":["Components/CBreadcrumbs.tsx","Pages/MiRed/Components/Loading/loading.tsx","Services/Comisiones/MiRed.ts","Pages/MiRed/Components/TreeData.tsx","Pages/MiRed/miRed.tsx"],"sourcesContent":["import React from 'react';\r\nimport { emphasize, styled } from '@mui/material/styles';\r\nimport Chip from '@mui/material/Chip';\r\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\n\r\nconst StyledBreadcrumb = styled(Chip)(({ theme }) => {\r\n  const backgroundColor =\r\n    theme.palette.mode === 'light'\r\n      ? theme.palette.grey[100]\r\n      : theme.palette.grey[800];\r\n  return {\r\n    backgroundColor,\r\n    height: theme.spacing(3),\r\n    color: theme.palette.text.primary,\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    '&:hover, &:focus': {\r\n      backgroundColor: emphasize(backgroundColor, 0.06),\r\n    },\r\n    '&:active': {\r\n      boxShadow: theme.shadows[1],\r\n      backgroundColor: emphasize(backgroundColor, 0.12),\r\n    },\r\n  };\r\n}) as typeof Chip; // TypeScript only: need a type cast here because https://github.com/Microsoft/TypeScript/issues/26591\r\n\r\nfunction handleClick(event: React.MouseEvent<Element, MouseEvent>) {\r\n  event.preventDefault();\r\n  console.info('You clicked a breadcrumb.');\r\n}\r\n\r\ninterface CBreadcrumbsProps {\r\n  icon: React.ReactElement;\r\n  nombreRoute: string;\r\n  route: string;\r\n  nombresRoutes: string[];\r\n  routes: string[];\r\n\r\n};\r\nexport const CBreadcrumbs = ({ icon, nombreRoute, route, nombresRoutes, routes }: CBreadcrumbsProps) => {\r\n  return (\r\n    <div role=\"presentation\" onClick={handleClick} style={{ marginBottom: '15px' }}>\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <StyledBreadcrumb\r\n          component=\"a\"\r\n          href={route}\r\n          label={nombreRoute}\r\n          icon={icon} />\r\n        {routes.map((value, i) => {\r\n          return (\r\n            <>\r\n              <StyledBreadcrumb key={i} component=\"a\" href={value} label={nombresRoutes[i]} />\r\n            </>\r\n          )\r\n        })}\r\n\r\n      </Breadcrumbs>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nimport './loading.css';\r\n\r\nexport const Loading = () => (\r\n  <div className=\"loading-shading-mui\">\r\n    <CircularProgress className=\"loading-icon-mui\" />\r\n  </div>\r\n);","import axios from 'axios';\r\nimport { AxiosRequest, AxiosResponse } from '../../Utils/Axios';\r\nimport { IResponseMiRed } from './Interfaces/IMiRed';\r\n//llamada a interceptor\r\nAxiosRequest();\r\nAxiosResponse();\r\nexport async function miRedService( nivel: number,parentId?: number[]) {\r\n    return await axios.get<IResponseMiRed>(`${process.env.REACT_APP_API_COMISIONES}api/mi-red?parentId=${parentId || ''}&nivel=${nivel}`);\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport {\r\n  TreeDataState,\r\n  CustomTreeData,\r\n  DataTypeProvider,\r\n} from '@devexpress/dx-react-grid';\r\nimport {\r\n  Grid,\r\n  VirtualTable,\r\n  TableHeaderRow,\r\n  TableTreeColumn,\r\n  Table,\r\n\r\n} from '@devexpress/dx-react-grid-material-ui';\r\n\r\nimport { Loading } from './Loading/loading';\r\nimport { miRedService } from '../../../Services/Comisiones/MiRed';\r\nimport { IMiRed } from '../../../Services/Comisiones/Interfaces/IMiRed';\r\nimport { Chip } from '@mui/material';\r\ninterface column {\r\n  name: string;\r\n  title: string;\r\n}\r\nconst TableRow = ({ row, ...restProps }: any) => (\r\n  <Table.Row\r\n    {...restProps}\r\n    // eslint-disable-next-line no-alert\r\n    onClick={() => alert(JSON.stringify(row))}\r\n  />\r\n);\r\nconst ROOT_ID = '';\r\n\r\nconst getRowId = (row: any) => row.id;\r\nconst getChildRows = (row: IMiRed, rootRows: IMiRed[]) => {\r\n  const childRows = rootRows.filter((r: IMiRed) => r.parentId === (row ? row.id.toString() : ROOT_ID));\r\n  if (childRows.length) {\r\n    return childRows;\r\n  }\r\n  return row && row.hasItems ? [] : null;\r\n};\r\n\r\nexport const TreeView = () => {\r\n  const [columns] = useState<column[]>([\r\n    { name: 'id', title: 'Nivel' },\r\n    { name: 'nivel_alcanzado', title: 'Nivel Alcanzado' },\r\n    { name: 'snombrecompleto', title: 'Nombre Completo' /* getCellValue: (row: any) => new Date(Date.parse(row.modifiedDate)).toLocaleString() */ },\r\n  ]);\r\n  const [treeList, setTreeList] = useState<IMiRed[]>([]);\r\n\r\n  const tableColumnExtensions: Table.ColumnExtension[] = [\r\n    { columnName: 'id', width: 150 },\r\n  ];\r\n  const [expandedRowIds, setExpandedRowIds] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const loadData = async (parentId?: number[], nivel: number = 1) => {\r\n    console.log('load treeList  ', parentId);\r\n    //pintado inicial\r\n    if (parentId) {\r\n      console.log('depuesta del primer pintado');\r\n      let verificar = {\r\n        valido: false,\r\n        nivel: \"\"\r\n      };\r\n      //verificando expandidos\r\n      parentId.forEach(element => {\r\n        const aux = verificarExiste(treeList, element);\r\n        verificar.nivel = aux.nivel;\r\n        verificar.valido = aux.valido;\r\n      });\r\n      console.log('verificando', verificar.valido)\r\n      if (verificar.valido) {\r\n        setLoading(true);\r\n        try {\r\n          const { data } = await miRedService(parseInt(verificar.nivel), parentId);\r\n          let concat = eliminarRepetidos(treeList.concat(...data.data));\r\n          setTreeList(concat);\r\n          setLoading(false);\r\n        } catch (error) {\r\n\r\n        }\r\n      }\r\n    } else {\r\n      setLoading(true);\r\n      console.log('primer pintado')\r\n      try {\r\n        const { data } = await miRedService(0, parentId);\r\n        let concat = eliminarRepetidos(treeList.concat(...data.data));\r\n        setTreeList(concat);\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  };\r\n\r\n  function eliminarRepetidos(valores: IMiRed[]) {\r\n    let hash: any = {};\r\n    valores = valores.filter(o => hash[o.id] ? false : hash[o.id] = true);\r\n    return valores;\r\n  }\r\n\r\n  function verificarExiste(valores: IMiRed[], id: number | undefined) {\r\n    let resultado = {\r\n      valido: false,\r\n      nivel: \"\"\r\n    };\r\n    if (id) {\r\n      valores.forEach(o => {\r\n        //console.log('evaluando', o.id, id)\r\n        if (o.id == id) {\r\n          console.log('COMPARADO ', o.id, id)\r\n          resultado.nivel = o.nivel;\r\n          resultado.valido = true;\r\n          return resultado;\r\n        }\r\n      });\r\n    }\r\n    return resultado;\r\n  }\r\n\r\n  function identificar(valores: IMiRed[], id: number) {\r\n    valores = valores.filter(o => {\r\n      //console.log('evalueando', o.parentId, id)\r\n      if (o.id == id) {\r\n        return o;\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    return () => {\r\n    }\r\n  }, []);\r\n\r\n  const CurrencyFormatter = ({ column, row, value }: any) => {\r\n    return (\r\n      <>\r\n        <Chip color=\"primary\" label={`Nivel ${row.nivel}`} style={{ borderRadius: 50, margin: 0 }} />\r\n      </>\r\n    )\r\n  };\r\n\r\n  const CurrencyTypeProvider = (props: any) => (\r\n    <DataTypeProvider\r\n      formatterComponent={CurrencyFormatter}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  const [currencyColumns] = useState(['id']);\r\n  return (\r\n    <Paper style={{ position: 'relative' }} >\r\n      <Grid\r\n        rows={treeList}\r\n        columns={columns}\r\n        getRowId={getRowId}\r\n\r\n      >\r\n        <TreeDataState\r\n          expandedRowIds={expandedRowIds}\r\n          onExpandedRowIdsChange={(data: any) => {\r\n            console.log('expand', data)\r\n            loadData(data)\r\n            setExpandedRowIds(data)\r\n          }}\r\n        />\r\n        <CurrencyTypeProvider\r\n          for={currencyColumns}\r\n        />\r\n        <CustomTreeData\r\n          getChildRows={getChildRows}\r\n        />\r\n        <VirtualTable\r\n          columnExtensions={tableColumnExtensions}\r\n        />\r\n        <Table rowComponent={TableRow} />\r\n        <TableHeaderRow />\r\n        <TableTreeColumn\r\n          for=\"id\"\r\n        />\r\n      </Grid>\r\n      {loading && <Loading />}\r\n    </Paper>\r\n  );\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport { CBreadcrumbs } from \"../../Components/CBreadcrumbs\";\r\nimport { TreeView } from \"./Components/TreeData\";\r\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\r\nconst miRed = () => {\r\n    return (\r\n        <>\r\n            <CBreadcrumbs icon={<AccountTreeIcon />} nombreRoute={\"Mi red\"} route={\"/mi-red\"} nombresRoutes={[]} routes={[]}></CBreadcrumbs>\r\n            <Typography variant=\"subtitle1\" component=\"h6\" style={{ fontWeight: 'bold' }}>\r\n                Mi red\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n                Información de mi red (personas invitadas), despliegue para ver más información.\r\n            </Typography>\r\n            <TreeView></TreeView>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default miRed;"],"names":["StyledBreadcrumb","styled","Chip","theme","backgroundColor","palette","mode","grey","height","spacing","color","text","primary","fontWeight","typography","fontWeightRegular","emphasize","boxShadow","shadows","handleClick","event","preventDefault","console","info","CBreadcrumbs","icon","nombreRoute","route","nombresRoutes","routes","role","onClick","style","marginBottom","component","href","label","map","value","i","Loading","className","CircularProgress","miRedService","nivel","parentId","axios","process","AxiosRequest","AxiosResponse","TableRow","row","restProps","alert","JSON","stringify","getRowId","id","getChildRows","rootRows","childRows","filter","r","toString","length","hasItems","TreeView","useState","name","title","columns","treeList","setTreeList","expandedRowIds","setExpandedRowIds","loading","setLoading","loadData","log","verificar","valido","forEach","element","aux","verificarExiste","parseInt","data","concat","eliminarRepetidos","valores","hash","o","resultado","useEffect","CurrencyFormatter","column","borderRadius","margin","CurrencyTypeProvider","props","formatterComponent","currencyColumns","Paper","position","rows","onExpandedRowIdsChange","for","columnExtensions","columnName","width","rowComponent","AccountTree","Typography","variant","gutterBottom"],"sourceRoot":""}